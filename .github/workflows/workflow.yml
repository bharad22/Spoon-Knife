name: Deploy to Amazon ECS

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: ap-south-1
  ECS_CLUSTER: mayaops-prod-cluster

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download server task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition mayaops-prod-spoon-server-task-def \
            --query taskDefinition > server-task-definition.json

      - name: Login to Amazon ECR
        id: login-server-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push server image to Amazon ECR
        id: build-server-image
        env:
          ECR_REGISTRY: ${{ steps.login-server-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/mayaops_spoon_ecr:$IMAGE_TAG .
          docker push $ECR_REGISTRY/mayaops_spoon_ecr:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/mayaops_spoon_ecr:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the server task definition
        id: task-def-server
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: server-task-definition.json
          container-name: mayaops-prod-spoon-server-container 
          image: ${{ steps.build-server-image.outputs.image }}

      - name: Deploy Amazon ECS server task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-server.outputs.task-definition }}
          service: mayaops-prod-spoon-server-service
          cluster: ${{ env.ECS_CLUSTER }}
          # wait-for-service-stability: true
